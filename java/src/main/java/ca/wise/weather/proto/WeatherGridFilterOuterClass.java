// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weatherGridFilter.proto

package ca.wise.weather.proto;

public final class WeatherGridFilterOuterClass {
  private WeatherGridFilterOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_WISE_WeatherProto_WeatherGridFilter_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_WISE_WeatherProto_WeatherGridFilter_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_WISE_WeatherProto_WeatherGridFilter_GridTypeOne_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_WISE_WeatherProto_WeatherGridFilter_GridTypeOne_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_WISE_WeatherProto_WeatherGridFilter_GridTypeTwo_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_WISE_WeatherProto_WeatherGridFilter_GridTypeTwo_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\027weatherGridFilter.proto\022\021WISE.WeatherP" +
      "roto\032\013wtime.proto\032\nmath.proto\032\017geography" +
      ".proto\032\036google/protobuf/wrappers.proto\"\357" +
      "\n\n\021WeatherGridFilter\022\017\n\007version\030\001 \001(\005\022#\n" +
      "\tstartTime\030\002 \001(\0132\020.HSS.Times.WTime\022!\n\007en" +
      "dTime\030\003 \001(\0132\020.HSS.Times.WTime\022,\n\016startTi" +
      "meOfDay\030\004 \001(\0132\024.HSS.Times.WTimeSpan\022*\n\014e" +
      "ndTimeOfDay\030\005 \001(\0132\024.HSS.Times.WTimeSpan\022" +
      "E\n\013temperature\030\006 \001(\01320.WISE.WeatherProto" +
      ".WeatherGridFilter.GridTypeOne\022<\n\002rh\030\007 \001" +
      "(\01320.WISE.WeatherProto.WeatherGridFilter" +
      ".GridTypeOne\022G\n\rprecipitation\030\010 \001(\01320.WI" +
      "SE.WeatherProto.WeatherGridFilter.GridTy" +
      "peOne\022C\n\twindSpeed\030\t \001(\01320.WISE.WeatherP" +
      "roto.WeatherGridFilter.GridTypeOne\022G\n\rwi" +
      "ndDirection\030\n \001(\01320.WISE.WeatherProto.We" +
      "atherGridFilter.GridTypeTwo\022&\n\010polygons\030" +
      "\013 \001(\0132\022.Geography.GeoPolyH\000\022\022\n\010filename\030" +
      "\014 \001(\tH\000\022\023\n\tlandscape\030\r \001(\010H\000\022\021\n\004name\030\016 \001" +
      "(\tH\001\210\001\001\022\025\n\010comments\030\017 \001(\tH\002\210\001\001\022\022\n\005color\030" +
      "\020 \001(\rH\003\210\001\001\022\021\n\004size\030\021 \001(\004H\004\210\001\001\032\336\001\n\013GridTy" +
      "peOne\022\017\n\007version\030\001 \001(\005\022\033\n\005value\030\002 \001(\0132\014." +
      "Math.Double\022M\n\toperation\030\003 \001(\0162:.WISE.We" +
      "atherProto.WeatherGridFilter.GridTypeOne" +
      ".Operation\"R\n\tOperation\022\t\n\005Equal\020\000\022\010\n\004Pl" +
      "us\020\001\022\t\n\005Minus\020\002\022\014\n\010Multiply\020\003\022\n\n\006Divide\020" +
      "\004\022\013\n\007Disable\020\005\032\225\003\n\013GridTypeTwo\022\017\n\007versio" +
      "n\030\001 \001(\005\022\035\n\005value\030\002 \001(\0132\014.Math.DoubleH\000\022O" +
      "\n\tdirection\030\003 \001(\0162:.WISE.WeatherProto.We" +
      "atherGridFilter.GridTypeTwo.DirectionH\000\022" +
      "M\n\toperation\030\004 \001(\0162:.WISE.WeatherProto.W" +
      "eatherGridFilter.GridTypeTwo.Operation\"8" +
      "\n\tOperation\022\t\n\005Equal\020\000\022\010\n\004Plus\020\001\022\t\n\005Minu" +
      "s\020\002\022\013\n\007Disable\020\003\"u\n\tDirection\022\t\n\005NORTH\020\000" +
      "\022\016\n\nNORTH_EAST\020\001\022\010\n\004EAST\020\002\022\016\n\nSOUTH_EAST" +
      "\020\003\022\t\n\005SOUTH\020\004\022\016\n\nSOUTH_WEST\020\005\022\010\n\004WEST\020\006\022" +
      "\016\n\nNORTH_WEST\020\007B\005\n\003valB\007\n\005shapeB\007\n\005_name" +
      "B\013\n\t_commentsB\010\n\006_colorB\007\n\005_sizeB-\n\025ca.w" +
      "ise.weather.protoP\001\252\002\021WISE.WeatherProtob" +
      "\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          ca.hss.times.proto.WTimePackage.getDescriptor(),
          ca.hss.math.proto.Math.getDescriptor(),
          ca.hss.math.proto.Geography.getDescriptor(),
          com.google.protobuf.WrappersProto.getDescriptor(),
        });
    internal_static_WISE_WeatherProto_WeatherGridFilter_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_WISE_WeatherProto_WeatherGridFilter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_WISE_WeatherProto_WeatherGridFilter_descriptor,
        new java.lang.String[] { "Version", "StartTime", "EndTime", "StartTimeOfDay", "EndTimeOfDay", "Temperature", "Rh", "Precipitation", "WindSpeed", "WindDirection", "Polygons", "Filename", "Landscape", "Name", "Comments", "Color", "Size", "Shape", "Name", "Comments", "Color", "Size", });
    internal_static_WISE_WeatherProto_WeatherGridFilter_GridTypeOne_descriptor =
      internal_static_WISE_WeatherProto_WeatherGridFilter_descriptor.getNestedTypes().get(0);
    internal_static_WISE_WeatherProto_WeatherGridFilter_GridTypeOne_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_WISE_WeatherProto_WeatherGridFilter_GridTypeOne_descriptor,
        new java.lang.String[] { "Version", "Value", "Operation", });
    internal_static_WISE_WeatherProto_WeatherGridFilter_GridTypeTwo_descriptor =
      internal_static_WISE_WeatherProto_WeatherGridFilter_descriptor.getNestedTypes().get(1);
    internal_static_WISE_WeatherProto_WeatherGridFilter_GridTypeTwo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_WISE_WeatherProto_WeatherGridFilter_GridTypeTwo_descriptor,
        new java.lang.String[] { "Version", "Value", "Direction", "Operation", "Val", });
    ca.hss.times.proto.WTimePackage.getDescriptor();
    ca.hss.math.proto.Math.getDescriptor();
    ca.hss.math.proto.Geography.getDescriptor();
    com.google.protobuf.WrappersProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
